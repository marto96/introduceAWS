service: initaws

frameworkVersion: '2'

plugins:
  - serverless-offline
provider:
  name: aws
  runtime: nodejs14.x
  lambdaHashingVersion: 20201221
  stage: dev
  region: us-east-1
  environment:
    REGION: ${self:provider.region}
    PENDING_ORDER_QUEUE:
      Ref: PendingOrdersQueue
    PENDING_ORDER_QUEUE_NAME: PendingOrdersQueue   
    COMPLETED_ORDER_TABLE: "CompletedOrderTable"
  iamRoleStatements:
    - Effect : "Allow"
      Action:
        - sqs:SendMessage
      Resource: "arn:aws:sqs:${self:provider.region}:*:${self:provider.environment.PENDING_ORDER_QUEUE_NAME}"  
    - Effect : "Allow"
      Action:
        - dynamodb:GetItem 
        - dynamodb:PutItem  
        - dynamodb:UpdateItem  
        - dynamodb:DeleteItem
        - dynamodb:ScanItem  
        - dynamodb:Scan  
      Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.COMPLETED_ORDER_TABLE}"  
functions:
  hacerPedido:
    handler: handler.hacerPedido
    events:
      - http:  
         method: post
         path: pedido
         cors:
          origin: '*'
          methods:
          - POST
          - OPTIONS
          headers:
          - Content-Type
          - X-Amz-Date
          - Authorization
          - X-Api-Key
          - X-Amz-Security-Token
          - X-Amz-User-Agent
          allowCredentials: false
         response:
          headers:
            Content-Type: "'application/json'"

  prepararPedido:
    handler: handler.prepararPedido
    events:
      - sqs:
         arn:
           Fn::GetAtt:
             - PendingOrdersQueue
             - Arn
         batchSize: 1    

  enviarPedido:
    handler: handler.enviarPedido
    events: 
      - stream: 
          type: dynamodb
          batchSize: 1
          startingPosition: LATEST  
          arn:
            Fn::GetAtt:
              - CompletedOrdersTable
              - StreamArn
  checkearEstadoPedidoUsuario:
    handler: handler.checkearEstadoPedido
    events:
      - http:  
         method: get
         path: pedido/{ordenId}
         cors:
          origin: '*'
          methods:
          - GET
          - OPTIONS
          headers:
          - Content-Type
          - X-Amz-Date
          - Authorization
          - X-Api-Key
          - X-Amz-Security-Token
          - X-Amz-User-Agent
          allowCredentials: false
         response:
          headers:
            Content-Type: "'application/json'"            
resources:
  Resources:
    PendingOrdersQueue:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: ${self:provider.environment.PENDING_ORDER_QUEUE_NAME}       
    CompletedOrdersTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        AttributeDefinitions:
        - AttributeName: "orderId" 
          AttributeType: "S"
        KeySchema:
        - AttributeName: "orderId" 
          KeyType: "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.COMPLETED_ORDER_TABLE}      
        StreamSpecification:
          StreamViewType: NEW_IMAGE 
        
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - httpApi:
#          path: /users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
